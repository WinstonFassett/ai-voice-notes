/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as LibraryRouteImport } from './routes/library'
import { Route as AgentsRouteImport } from './routes/agents'
import { Route as IndexRouteImport } from './routes/index'
import { Route as NoteIdRouteImport } from './routes/note.$id'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const LibraryRoute = LibraryRouteImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => rootRouteImport,
} as any)
const AgentsRoute = AgentsRouteImport.update({
  id: '/agents',
  path: '/agents',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NoteIdRoute = NoteIdRouteImport.update({
  id: '/note/$id',
  path: '/note/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/library': typeof LibraryRoute
  '/settings': typeof SettingsRoute
  '/note/$id': typeof NoteIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/library': typeof LibraryRoute
  '/settings': typeof SettingsRoute
  '/note/$id': typeof NoteIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/library': typeof LibraryRoute
  '/settings': typeof SettingsRoute
  '/note/$id': typeof NoteIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/agents' | '/library' | '/settings' | '/note/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/agents' | '/library' | '/settings' | '/note/$id'
  id: '__root__' | '/' | '/agents' | '/library' | '/settings' | '/note/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AgentsRoute: typeof AgentsRoute
  LibraryRoute: typeof LibraryRoute
  SettingsRoute: typeof SettingsRoute
  NoteIdRoute: typeof NoteIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/library': {
      id: '/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/agents': {
      id: '/agents'
      path: '/agents'
      fullPath: '/agents'
      preLoaderRoute: typeof AgentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/note/$id': {
      id: '/note/$id'
      path: '/note/$id'
      fullPath: '/note/$id'
      preLoaderRoute: typeof NoteIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgentsRoute: AgentsRoute,
  LibraryRoute: LibraryRoute,
  SettingsRoute: SettingsRoute,
  NoteIdRoute: NoteIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
